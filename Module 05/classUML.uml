@startuml
' Skin configuration (optional)\nskinparam classAttributeIconSize 0

title Railway Simulation Class Diagram

' Interfaces
interface RailEventListener
interface NodeEventListener
interface Observer
interface Subject

' Abstract Sources
abstract class RailEventSource {
-railObservers: Set<RailEventListener*>
+addRailObserver(obs: RailEventListener*)
+removeRailObserver(obs: RailEventListener*)
+notifyRailObservers(event: RailEventType)
}
abstract class NodeEventSource {
-nodeObservers: Set<NodeEventListener*>
+addNodeObserver(obs: NodeEventListener*)
+removeNodeObserver(obs: NodeEventListener*)
+notifyNodeObservers(event: NodeEventType)
}

' Events
enum RailEventType
enum NodeEventType

' Utilities
class Time {
-hours: chrono::hours
-minutes: chrono::minutes
-seconds: chrono::seconds
+Time(h:int, m:int, s:int)
+Time(str:string)
+toFloat():float
+toString():string
+operator+()
+operator-()
}

' Singleton template
class Singleton

' Factory
class Factory {
+createNode(name:string): Node*
+createRail(dep:Node*, arr:Node*, len:float, limit:float): Rail*
+createTrain(...): Train*
}
Factory --|> Singleton

' Linkable Part
class LinkablePart {
-connectedParts: Set<LinkablePart*>
+addConnection(part:LinkablePart*)
+getConnectedParts(): Set<LinkablePart*>
}

' Node and Rail
class Node {
-name: string
-isClosed: bool
+getName():string
+getConnectedRails(): Set<Rail*>
+onNodeEvent(event:NodeEventType)
}
class Rail {
-id: long
-length: float
-speedLimit: float
-trainOnSegment: Set<Train*>
-isClosed: bool
+getId():long
+getDeparture():Node*
+getArrival():Node*
+getLength():float
+getSpeedLimit():float
+isClosedRail():bool
+addTrain(t:Train*)
+removeTrain(t:Train*)
+isTrainOnSegment(t:Train*):bool
+onRailEvent(event:RailEventType)
}
NodeEventListener <|.. Node
RailEventListener <|.. Rail
Node --|> LinkablePart
Rail --|> LinkablePart

' Collections
abstract class Set {
-elements: Set<T*>
+add(elem:T*)
+remove(elem:T*)
+getElements():Set<T*>
}
class TrainCollection
class RailCollection
class NodeCollection
Set <|-- TrainCollection
Set <|-- RailCollection
Set <|-- NodeCollection
TrainCollection o-- Train
RailCollection o-- Rail
NodeCollection o-- Node

' Pathfinding
class Pathfinding {
-gScore: Map<LinkablePart*,float>
-parent: Map<LinkablePart*,LinkablePart*>
-closed: Set<LinkablePart*>
-waitTime: float
+dijkstra(train:Train*): List<LinkablePart*>
}

' Route & Schedule & TrainState & Specification & Identity
class Identity {
-id: long
-name:string
+getId():long
+getName():string
}
class Specification {
-weightTonnes:float
-frictionCoefficient:float
-accelCoeff:float
-brakeCoeff:float
}
class Route {
-departure:Node*
-arrival:Node*
-route:List<LinkablePart*>
+setRoute(r)
}
class Schedule {
-departureTime:Time
-stopDuration:Time
-countdown:Time
+getDepartureTime():Time
+getStopDuration():Time
+getCountdown():Time
}
class TrainState {
-stateType:TrainStateType
-currentPart:LinkablePart*
-speed:float
-distance:float
}

Train o-- Identity
Train o-- Specification
Train o-- Route
Train o-- Schedule
Train o-- TrainState

' Train & Simulation
enum TrainStateType
class Train {
+requestRoute()
+travel(time:Time)
+update(time:Time)
}
class Simulation {
-globalTime:Time
+parseRailNetwork(file:string)
+parseTrainComposition(file:string)
+calculateRoute(t:Train*):List<LinkablePart*>
+update(time:Time)
}
TrainStateListener <|.. Train
Observer <|.. Train
Subject <|-- Simulation

' RandomEvent
class RandomEvent {
+randomEvent(prob:float)
}
RandomEvent --|> RailEventSource
RandomEvent --|> NodeEventSource

' Relationships
TrainStateType .. TrainState
TrainStateType .. Train
Time .. Train
Time .. Schedule
Pathfinding .. Rail
Pathfinding .. Node
Pathfinding .. Train
Simulation .. Factory
Simulation .. Pathfinding
Simulation .. TrainCollection
Simulation .. RailCollection
Simulation .. NodeCollection

@enduml